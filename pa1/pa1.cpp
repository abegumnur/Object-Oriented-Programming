#include<iostream>
#include<ctime>
#include<cstdlib>

using std::cout;
using std::cin;

const char* USER_ENTER = "-u"; /*   Argument for the user to provide a secret number */
const char* RANDOM_GEN = "-r"; /*   Argument for the computer to generate a secret number */
const int MAX_ITERATION = 100; /*   Iteration limit    */
const int MAX_DIGIT = 9;       /*   Maximum number of digits a generated number can have*/
const int MAX_CHAR = 50;       /*   Maximum chars for the input string  */

/*  @brief Main game loop that runs until either an error 
    occures, user wins the game or max iteration is reached.
    @param secretNum - Secret number generated by the computer 
    or initialized by the user.  */
void playMastermind( int secretNum );

/* @brief Generates a unique secret number by 
    shuffling the array that holds the possible digit values
    and does the necessary calculations to compute
    a number that has n digits.
    @param digit - The number of digits the generated secret
    number should hold.
    @return Generated secret number is returned.    */
int genUniqueNum( int digit );

/* @brief Calculates every digit a given number has 
    one by one and puts them onto an int array.
    @param number - The number that given int array 
    will hold the digits of.
    @param arr - Array that holds the digits.
    @param i - The number of digits the given number
    has.    */
void turnToArray( int number, int * arr, int i);

/*  @brief Calculates the number of matching exact digits
    the guess number and the secret number has. 
    @param secret - int array that holds the digits of the
    secret number.
    @param guess - int array that holds the digits of the 
    guess number provided by the user.
    @param digits - The number of elements both of these
    arrays have.
    @return The number of exact matching digits.     */
int getExactDigits(int* secret, int* guess, int digits);

/*  @brief Calculates the number of misplaced digits 
    the guess number and the secrey number has.
    @param secret - int array of the secret number
    @param guess - int array of the guess number
    @param digits - The number of elements both arrays have
    @return The number of misplaced elements.   */
int getMisplacedDigits(int* secret, int* guess, int digits);

/*  @brief Checks if a number that placed in int array
    has unique digits.
    @param arr - Holds the digits of the number to check
    the uniqueness of.
    @param digits - The number of digits said number has. 
    @return True if the number is unique, false otherwise.  */
bool checkIfUnique( int* arr, int digits);

/*****     UTILITY FUNCTIONS    *****/
int findNumDigits( int num );
void swapNumbers( int* a, int* b);
int powerOfN( int base, int exponent);
int stringLen( const char * str);
bool stringComp( const char* first, const char* second );
int charToInt( char* str);
bool checkInteger(char* input);


int main( int argc, char* argv[] ){

    char digit;
    int digits;

    /* In the case of missing parameters
        print E0 and exit the program */
    if( argc < 3){ 
        cout << "E0\n";
        exit(1);
    } 

    /* -r is the second given argument  */
    if( stringComp( argv[1] , RANDOM_GEN) ){

        /* Third argument should be a digit with 
            length 1 */        
        if( stringLen( argv[2] ) > 1){
            cout << "E0\n";
            exit(1);
        }

        digit = argv[2][0];
        /* Provided digit number should be 
            greater than 0 */
        if( !( digit > 48 && digit < 58 )){
            cout << "E0\n";
            exit(1);
        }

        digits = digit - '0'; 
        /* Generate a unique number and play the 
            game loop   */
        int secretNum = genUniqueNum(digits);
        playMastermind( secretNum );

    } 

    /* -u is the second given argument  */
    else if( stringComp( argv[1], USER_ENTER) ){

        int secretNumber = charToInt(argv[2]);

        /*  Secret number is negative    */
        if(secretNumber < 0){
            cout << "E0\n";
            exit(1);
        }

        int secretN[MAX_DIGIT];
        int digitN = findNumDigits( secretNumber );

        /* Place the secret number into an array    */
        turnToArray( secretNumber, secretN, digitN - 1 );

        /* The provided secret number is not unique */
        if ( !checkIfUnique(secretN, digitN ) ){
            cout << "E0\n";
            exit(1);
        }

        else
            playMastermind( secretNumber );

    }

    /* Any other type of error  */
    else
        cout << "E0\n";
    
    return 0;
}



void playMastermind( int secretNum ){

    char strGuess[MAX_CHAR];
    int userGuess;
    int digitCount = findNumDigits( secretNum );
    int secretNumber[MAX_DIGIT], userNumber[MAX_DIGIT];

    /* Place the secret number into an array*/
    turnToArray(secretNum, secretNumber, digitCount - 1);

    for(int i = 1; i <= MAX_ITERATION; i++){

        cin >> strGuess;

        /* User entered something except an integer */
        if( !checkInteger(strGuess) ){
            printf("E2\n");
            exit(1);
        }  

        userGuess = charToInt(strGuess);

        /* User guess has less digits than initialized  */
        if( digitCount != findNumDigits( userGuess ) ){
            cout << "E1\n";
            exit(1);
        }

        turnToArray( userGuess, userNumber, digitCount - 1);
        /* The user guess is not a unique number  */
        if ( !checkIfUnique( userNumber, digitCount)){
            cout << "E0\n";
            exit(1);
        }
        
        else if( secretNum == userGuess){
            cout << "FOUND "<< i <<std::endl;
            return;
        }
 
        else
            cout << getExactDigits(secretNumber , userNumber, digitCount) << " "
            << getMisplacedDigits(secretNumber, userNumber, digitCount) <<std::endl;
    }

    cout << "FAILED\n";
    return;

}



int genUniqueNum( int digit ){

    int first, second;
    int digits[MAX_DIGIT + 1] = {0, 1, 2, 3 ,4, 5, 6, 7, 8, 9};
    int uniqueNum = 0;

    srand(time(NULL));
    /* Randomly swap the elements of the digits array   */
    for(int i = 0; i < digit * MAX_DIGIT; i++){        

        first = rand() % MAX_DIGIT;
        second = rand() % MAX_DIGIT;
        swapNumbers( &digits[first], &digits[second] );

    }

    /*  Calculates the secret number with n digits  */
    for(int i = 0; i < digit; i++){

        if(i == 0 && digits[i] != 0)
            uniqueNum += powerOfN( 10, i ) * digits[i];

        else
            uniqueNum += powerOfN( 10, i ) * digits[i + 1];
    }

        return uniqueNum;   

}


bool checkIfUnique( int* arr, int digits){

    for(int i = 0; i < digits; i++)
        for(int k = i + 1; k < digits; k++)
            if( arr[i] == arr[k])
                return false;
            
    return true;

}


int getExactDigits(int* secret, int* guess, int digits){

    int exactDigits = 0;

    for(int i = 0; i < digits; i++)
        if( secret[i] == guess[i] )
            exactDigits++;
    
    return exactDigits;

}


int getMisplacedDigits(int* secret, int* guess, int digits){

    int misplaced = 0;

    for(int i = 0; i < digits; i++)
        for(int k = 0; k < digits; k++)
            if( secret[i] == guess[k] && i != k)
                misplaced++;
    
    return misplaced;

}


void turnToArray( int number, int * arr, int i){

    if( number < 10 && i == 0)
        arr[i] = number;

    else{
        turnToArray( number / 10, arr, i - 1);
        arr[i] = number % 10;
    }

}


int findNumDigits( int num ){

    int digits;

    if( num == 0 )
        digits = 1;

    for(digits = 0; num > 0; digits++)
        num /= 10;

    return digits;
}


int charToInt( char* str){

    int result = 0, digit;
    int length = stringLen( str );
    bool sig = (*str == '-');

    if ( sig ) {
        str++;
        length--;
    }

    for(int i = 0; i < length; i++){
        digit = *(str + i) - '0';
        result += digit * powerOfN(10, length - i - 1); 
    }

    result *= sig ? -1 : 1;

    return result;
}


bool stringComp( const char* first, const char* second ){

    const char* firstc = first;
    const char* secondc = second;
    int i = 0;


    while( firstc[i] == secondc[i]){

        if(firstc[i] == '\0')
            return true;

        i++;
    }

    return false;

}

int stringLen( const char * str){

    if(str[0] == '\0')
        return 0;

    else
        return 1 + stringLen( &str[1] );
}


int powerOfN( int base, int exponent){

    int result = 1;

    while( exponent ){
        result *= base;
        exponent--;
    }

    return result;

}


void swapNumbers( int* a, int* b){

    int temp;

    temp = *a;
    *a = *b;
    *b = temp;

}

bool checkInteger(char* input){

    bool isNeg = false;
    int itr = 0;

    if(stringLen(input) == 0)
        return false;

    /* Return false in the case of a negative int   */
    else if(input[0]=='-')
        return false;
 
    for(int i = itr; i < stringLen( input ); i++)
        if( ! (input[i] > 47 && input[i] < 58) )
            return false;

    return true;
}






